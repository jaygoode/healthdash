[{"C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\index.tsx":"1","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\App.tsx":"2","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\redux\\store.ts":"3","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\redux\\reducers\\userReducer.ts":"4","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\redux\\reducers\\noteReducer.ts":"5","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\redux\\reducers\\activityReducer.ts":"6","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\components\\Navbar.tsx":"7","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\components\\InfoContainer.tsx":"8","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\components\\InfoSquare.tsx":"9","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\components\\Overview.tsx":"10"},{"size":323,"mtime":1670276332847,"results":"11","hashOfConfig":"12"},{"size":466,"mtime":1670681726880,"results":"13","hashOfConfig":"12"},{"size":505,"mtime":1670276419715,"results":"14","hashOfConfig":"12"},{"size":5123,"mtime":1668377308266,"results":"15","hashOfConfig":"12"},{"size":3068,"mtime":1670274965697,"results":"16","hashOfConfig":"12"},{"size":3766,"mtime":1670272772473,"results":"17","hashOfConfig":"12"},{"size":562,"mtime":1670683038739,"results":"18","hashOfConfig":"12"},{"size":386,"mtime":1670355283038,"results":"19","hashOfConfig":"12"},{"size":211,"mtime":1670355222367,"results":"20","hashOfConfig":"12"},{"size":93,"mtime":1670681791418,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"fsv9qj",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"25"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\index.tsx",[],[],[],"C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\App.tsx",[],[],"C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\redux\\store.ts",[],[],"C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\redux\\reducers\\userReducer.ts",[],[],"C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\redux\\reducers\\noteReducer.ts",["55"],[],"import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Note, NoteReducerState } from \"../../types/noteTypes\";\r\n\r\nconst initialState: NoteReducerState = {\r\n  noteList: [],\r\n  currentNote: undefined,\r\n};\r\n\r\nexport const getNotes = createAsyncThunk(\"getNotes\", async () => {\r\n  try {\r\n    const data = await fetch(\"https://localhost:5000/api/Notes\");\r\n    let result = await data.json();\r\n    return result;\r\n  } catch (error: any) {\r\n    return error.message;\r\n  }\r\n});\r\n\r\nexport const updatenote = createAsyncThunk(\r\n  \"updatenote\",\r\n  async (update: Partial<Note>) => {\r\n    try {\r\n      console.log(update);\r\n      const response = await fetch(`https://localhost:5000/api/Notes/`, {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(update),\r\n      });\r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error: any) {\r\n      return error.message;\r\n    }\r\n  }\r\n);\r\n\r\nexport const createnote = createAsyncThunk(\"createnote\", async (note: Note) => {\r\n  const { id, dateCreated, tags, content, activityId, userId } = note;\r\n  try {\r\n    const response = await fetch(\"https://localhost:5000/api/Notes\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        dateCreated,\r\n        tags,\r\n        content,\r\n        activityId,\r\n        userId,\r\n      }),\r\n    });\r\n    const result = await response.json();\r\n    console.log(result);\r\n    return result;\r\n  } catch (error: any) {\r\n    return error.message;\r\n  }\r\n});\r\n\r\nexport const deletenote = createAsyncThunk(\"deletenote\", async (id: string) => {\r\n  try {\r\n    const response = await fetch(`https://localhost:5000/api/Notes/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error: any) {\r\n    return error.message;\r\n  }\r\n});\r\n\r\nconst noteSlice = createSlice({\r\n  name: \"noteReducer\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getNotes.fulfilled, (state, action: PayloadAction<Note>) => {\r\n        state.currentNote = action.payload;\r\n        return state;\r\n      })\r\n      .addCase(updatenote.fulfilled, (state, action: PayloadAction<Note>) => {\r\n        state.noteList.map((note) => {\r\n          if (note.id === action.payload.id) {\r\n            note = action.payload;\r\n            return note;\r\n          }\r\n          return state;\r\n        });\r\n        if (state.currentNote && state.currentNote.id === action.payload.id) {\r\n          state.currentNote = action.payload;\r\n        }\r\n        return state;\r\n      })\r\n      .addCase(createnote.fulfilled, (state, action: PayloadAction<Note>) => {\r\n        state.currentNote = action.payload;\r\n        return state;\r\n      })\r\n      .addCase(deletenote.fulfilled, (state, action: PayloadAction<Note>) => {\r\n        return state;\r\n      });\r\n  },\r\n});\r\n\r\nexport const noteReducer = noteSlice.reducer;\r\n","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\redux\\reducers\\activityReducer.ts",["56"],[],"import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Activity, ActivityReducerState } from \"../../types/activityTypes\";\r\n\r\nconst initialState:ActivityReducerState = {\r\n  activityList:[],\r\n  currentActivity:undefined\r\n  };\r\n  \r\n  export const getActivities = createAsyncThunk(\"getActivities\", async () => {\r\n    try {\r\n      const data = await fetch(\"https://localhost:5000/api/Activities\");\r\n      let result = await data.json();\r\n      return result;\r\n    } catch (error: any) {\r\n      return error.message;\r\n    }\r\n  });\r\n  \r\n  export const updateActivity = createAsyncThunk(\r\n    \"updateActivity\",\r\n    async (update: Partial<Activity>) => {\r\n      try {\r\n        console.log(update);\r\n        const response = await fetch(`https://localhost:5000/api/Activities/`, {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(update),\r\n        });\r\n        const result = await response.json();\r\n        return result;\r\n      } catch (error: any) {\r\n        return error.message;\r\n      }\r\n    }\r\n  );\r\n  \r\n  export const createActivity = createAsyncThunk(\"createActivity\", async (activity: Activity) => {\r\n    const { id, createTime, endTime, type, intensity, noteId, userId } =\r\n      activity;\r\n    try {\r\n      const response = await fetch(\"https://localhost:5000/api/Activities\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          createTime,\r\n          endTime,\r\n          type,\r\n          intensity,\r\n          noteId,\r\n          userId\r\n        }),\r\n      });\r\n      const result = await response.json();\r\n      console.log(result);\r\n      return result;\r\n    } catch (error: any) {\r\n      return error.message;\r\n    }\r\n  });\r\n  \r\n  export const deleteActivity = createAsyncThunk(\"deleteActivity\", async (id: string) => {\r\n    try {\r\n      const response = await fetch(`https://localhost:5000/api/Activities/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error: any) {\r\n      return error.message;\r\n    }\r\n  });\r\n  \r\n  \r\n  \r\n  const ActivitySlice = createSlice({\r\n    name: \"ActivityReducer\",\r\n    initialState: initialState,\r\n    reducers: {\r\n      \r\n    },\r\n    extraReducers: (builder) => {\r\n      builder\r\n        .addCase(getActivities.fulfilled, (state, action: PayloadAction<Activity>) => {\r\n          state.currentActivity = action.payload;\r\n          return state;\r\n        })\r\n        .addCase(updateActivity.fulfilled, (state, action: PayloadAction<Activity>) => {\r\n          state.activityList.map((Activity) => {\r\n            if (Activity.id === action.payload.id) {\r\n              Activity = action.payload;\r\n              return Activity;\r\n            }\r\n            return state;\r\n          });\r\n          if (state.currentActivity && state.currentActivity.id === action.payload.id) {\r\n            state.currentActivity = action.payload;\r\n          }\r\n          return state;\r\n        })\r\n        .addCase(createActivity.fulfilled, (state, action: PayloadAction<Activity>) => {\r\n          // if (state.currentActivity && state.currentActivity.role === \"customer\") {\r\n            state.currentActivity = action.payload;\r\n          // } else if (state.currentActivity && state.currentActivity.role === \"admin\") {\r\n          //   state.ActivityList.push(action.payload);\r\n          // }\r\n          return state;\r\n        })\r\n        .addCase(deleteActivity.fulfilled, (state, action: PayloadAction<Activity>) => {\r\n          return state;\r\n        })\r\n      \r\n    },\r\n  });\r\n  \r\n  export const ActivityReducer = ActivitySlice.reducer;\r\n  ","C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\components\\Navbar.tsx",[],[],"C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\components\\InfoContainer.tsx",[],[],"C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\components\\InfoSquare.tsx",[],[],"C:\\Users\\johnny\\fs11\\healthdash\\healthdash\\client\\src\\components\\Overview.tsx",[],[],{"ruleId":"57","severity":1,"message":"58","line":40,"column":11,"nodeType":"59","messageId":"60","endLine":40,"endColumn":13},{"ruleId":"57","severity":1,"message":"58","line":40,"column":13,"nodeType":"59","messageId":"60","endLine":40,"endColumn":15},"@typescript-eslint/no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar"]