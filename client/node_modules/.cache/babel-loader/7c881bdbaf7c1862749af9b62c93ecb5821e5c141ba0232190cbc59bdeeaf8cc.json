{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  noteList: [],\n  currentNote: undefined\n};\nexport const getNotes = createAsyncThunk(\"getNotes\", async () => {\n  try {\n    const data = await fetch(\"https://localhost:5000/api/Notes\");\n    let result = await data.json();\n    return result;\n  } catch (error) {\n    return error.message;\n  }\n});\nexport const updatenote = createAsyncThunk(\"updatenote\", async update => {\n  try {\n    console.log(update);\n    const response = await fetch(`https://localhost:5000/api/Notes/`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(update)\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    return error.message;\n  }\n});\nexport const createnote = createAsyncThunk(\"createnote\", async note => {\n  const {\n    id,\n    dateCreated,\n    tags,\n    content,\n    activityId,\n    userId\n  } = note;\n  try {\n    const response = await fetch(\"https://localhost:5000/api/Notes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        dateCreated,\n        tags,\n        content,\n        activityId,\n        userId\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n    return result;\n  } catch (error) {\n    return error.message;\n  }\n});\nexport const deletenote = createAsyncThunk(\"deletenote\", async id => {\n  try {\n    const response = await fetch(`https://localhost:5000/api/Notes/${id}`, {\n      method: \"DELETE\"\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    return error.message;\n  }\n});\nconst noteSlice = createSlice({\n  name: \"noteReducer\",\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getNotes.fulfilled, (state, action) => {\n      state.currentNote = action.payload;\n      return state;\n    }).addCase(updatenote.fulfilled, (state, action) => {\n      state.noteList.map(note => {\n        if (note.id === action.payload.id) {\n          note = action.payload;\n          return note;\n        }\n        return state;\n      });\n      if (state.currentNote && state.currentNote.id === action.payload.id) {\n        state.currentNote = action.payload;\n      }\n      return state;\n    }).addCase(createnote.fulfilled, (state, action) => {\n      state.currentNote = action.payload;\n      return state;\n    }).addCase(deletenote.fulfilled, (state, action) => {\n      return state;\n    });\n  }\n});\nexport const noteReducer = noteSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","noteList","currentNote","undefined","getNotes","data","fetch","result","json","error","message","updatenote","update","console","log","response","method","headers","body","JSON","stringify","createnote","note","id","dateCreated","tags","content","activityId","userId","deletenote","noteSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","map","noteReducer","reducer"],"sources":["C:/Users/johnny/fs11/healthdash/healthdash/client/src/redux/reducers/noteReducer.ts"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Note, NoteReducerState } from \"../../types/noteTypes\";\r\n\r\nconst initialState: NoteReducerState = {\r\n  noteList: [],\r\n  currentNote: undefined,\r\n};\r\n\r\nexport const getNotes = createAsyncThunk(\"getNotes\", async () => {\r\n  try {\r\n    const data = await fetch(\"https://localhost:5000/api/Notes\");\r\n    let result = await data.json();\r\n    return result;\r\n  } catch (error: any) {\r\n    return error.message;\r\n  }\r\n});\r\n\r\nexport const updatenote = createAsyncThunk(\r\n  \"updatenote\",\r\n  async (update: Partial<Note>) => {\r\n    try {\r\n      console.log(update);\r\n      const response = await fetch(`https://localhost:5000/api/Notes/`, {\r\n        method: \"PATCH\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(update),\r\n      });\r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error: any) {\r\n      return error.message;\r\n    }\r\n  }\r\n);\r\n\r\nexport const createnote = createAsyncThunk(\"createnote\", async (note: Note) => {\r\n  const { id, dateCreated, tags, content, activityId, userId } = note;\r\n  try {\r\n    const response = await fetch(\"https://localhost:5000/api/Notes\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        dateCreated,\r\n        tags,\r\n        content,\r\n        activityId,\r\n        userId,\r\n      }),\r\n    });\r\n    const result = await response.json();\r\n    console.log(result);\r\n    return result;\r\n  } catch (error: any) {\r\n    return error.message;\r\n  }\r\n});\r\n\r\nexport const deletenote = createAsyncThunk(\"deletenote\", async (id: string) => {\r\n  try {\r\n    const response = await fetch(`https://localhost:5000/api/Notes/${id}`, {\r\n      method: \"DELETE\",\r\n    });\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error: any) {\r\n    return error.message;\r\n  }\r\n});\r\n\r\nconst noteSlice = createSlice({\r\n  name: \"noteReducer\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(getNotes.fulfilled, (state, action: PayloadAction<Note>) => {\r\n        state.currentNote = action.payload;\r\n        return state;\r\n      })\r\n      .addCase(updatenote.fulfilled, (state, action: PayloadAction<Note>) => {\r\n        state.noteList.map((note) => {\r\n          if (note.id === action.payload.id) {\r\n            note = action.payload;\r\n            return note;\r\n          }\r\n          return state;\r\n        });\r\n        if (state.currentNote && state.currentNote.id === action.payload.id) {\r\n          state.currentNote = action.payload;\r\n        }\r\n        return state;\r\n      })\r\n      .addCase(createnote.fulfilled, (state, action: PayloadAction<Note>) => {\r\n        state.currentNote = action.payload;\r\n        return state;\r\n      })\r\n      .addCase(deletenote.fulfilled, (state, action: PayloadAction<Note>) => {\r\n        return state;\r\n      });\r\n  },\r\n});\r\n\r\nexport const noteReducer = noteSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}